{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "CloudFormation to deploy Jenkins and time-off-managment-application",

  "Parameters": {
    "KeyName": {
      "Description": "EC2 Key pair should exist",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "default",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "Environment": {
      "Description": "Name of environment to deploy to",
      "Type": "String",
      "Default": "production",
      "AllowedValues": ["production"]
    }
  },
  "Mappings": {
    "GlobalMap": {
      "InstType": {
        "production": "t2.micro"
      }
    },
    "InstanceAMI": {
      "us-east-1": {
        "production": "ami-0ab4d1e9cf9a1215a"
      }
    },
    "SecurityGroups": {
      "us-east-1": {
        "production":  "sg-09043528" 
      }
    },
    "VPCSubnets": {
      "us-east-1": {
        "production": [
          "subnet-c2f17e8f"
        ]
      }
    },
    "VPCmap":{
      "us-east-1" : {"vpc":"vpc-89f2faf3"}
    }
  },
  "Conditions": {
    "InProduction": { "Fn::Equals": [{ "Ref": "Environment" }, "production"] }
  },
  "Resources": {
    "JenkinsSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow ports to Jenkins",
        "VpcId" : {"Fn::FindInMap": ["VPCmap",
          { "Ref" : "AWS::Region" },"vpc"]},
          "SecurityGroupIngress": [
              {
                "IpProtocol": "-1",
                "FromPort": "8080",
                "ToPort": "8080",
                "CidrIp": "0.0.0.0/0"
              },
              {
                "IpProtocol": "-1",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
              }
            ],
            "Tags": [
              {"Key": "Name","Value": "sg-jenkins"}
            ]
          }
    },
    "JenkinsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:CreateUploadBucket",
                    "cloudformation:CancelUpdateStack",
                    "cloudformation:UpdateStackInstances",
                    "cloudformation:UpdateTerminationProtection",
                    "cloudformation:UpdateStackSet",
                    "cloudformation:CreateChangeSet",
                    "cloudformation:CreateStackInstances",
                    "cloudformation:GetTemplateSummary",
                    "cloudformation:ContinueUpdateRollback",
                    "cloudformation:CreateStack",
                    "cloudformation:UpdateStack",
                    "cloudformation:StopStackSetOperation",
                    "cloudformation:ExecuteChangeSet",
                    "cloudformation:CreateStackSet",
                    "cloudformation:Describe*",
                    "cloudformation:EstimateTemplateCost",
                    "cloudformation:Get*",
                    "cloudformation:List*",
                    "cloudformation:ValidateTemplate",
                    "cloudformation:SignalResource",
                    "cloudformation:DescribeChangeSet",
                    "cloudformation:DescribeStackResources",
                    "cloudformation:DescribeStacks",
                    "cloudformation:GetTemplate",
                    "cloudformation:ListStackResources",
                    "cloudformation:DeleteStack",
                    "cloudformation:DescribeStack*",
                    "cloudfront:GetDistribution",
                    "cloudfront:CreateStreamingDistribution",
                    "cloudfront:UpdateCloudFrontOriginAccessIdentity",
                    "cloudfront:UpdateDistribution",
                    "cloudfront:UpdateStreamingDistribution",
                    "cloudfront:CreateDistribution",
                    "cloudfront:CreateInvalidation",
                    "cloudfront:CreateCloudFrontOriginAccessIdentity",
                    "cloudfront:*",
                    "logs:Create*",
                    "logs:PutLogEvents",
                    "logs:*",
                    "logs:CreateLogGroup",
                    "logs:DescribeLogGroups",
                    "logs:FilterLogEvents",
                    "ec2:*",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeVpcs",
                    "ec2:AssociateRouteTable",
                    "ec2:AttachInternetGateway",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:CancelSpotFleetRequests",
                    "ec2:CreateInternetGateway",
                    "ec2:CreateLaunchTemplate",
                    "ec2:CreateRoute",
                    "ec2:CreateRouteTable",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateSubnet",
                    "ec2:CreateVpc",
                    "ec2:DeleteLaunchTemplate",
                    "ec2:DeleteSubnet",
                    "ec2:DeleteVpc",
                    "ec2:Describe*",
                    "ec2:DetachInternetGateway",
                    "ec2:DisassociateRouteTable",
                    "ec2:ModifySubnetAttribute",
                    "ec2:ModifyVpcAttribute",
                    "ec2:RequestSpotFleet",
                    "ec2:RunInstances",
                    "s3:*",
                    "ecr:*",
                    "iam:ListPolicies",
                    "iam:*",
                    "iam:GetPolicy",
                    "iam:GetPolicyVersion",
                    "iam:GetRole",
                    "iam:GetRolePolicy",
                    "iam:ListAttachedRolePolicies",
                    "iam:ListRolePolicies",
                    "iam:ListRoles",
                    "iam:PassRole",
                    "iam:ListInstanceProfiles",
                    "iam:CreateServiceLinkedRole",
                    "dynamodb:*",
                    "cloudwatch:*",
                    "cloudwatch:DeleteAlarms",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DescribeAlarmHistory",
                    "cloudwatch:ListMetrics",
                    "cloudwatch:GetMetricData",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "cloudwatch:GetInsightRuleReport",
                    "cognito-identity:ListIdentityPools",
                    "cognito-sync:GetCognitoEvents",
                    "cognito-sync:SetCognitoEvents",
                    "events:*",
                    "events:DeleteRule",
                    "events:DescribeRule",
                    "events:ListRuleNamesByTarget",
                    "events:ListTargetsByRule",
                    "events:PutRule",
                    "events:PutTargets",
                    "events:RemoveTargets",
                    "iot:AttachPrincipalPolicy",
                    "iot:AttachThingPrincipal",
                    "iot:CreateKeysAndCertificate",
                    "iot:CreatePolicy",
                    "iot:CreateThing",
                    "iot:CreateTopicRule",
                    "iot:DescribeEndpoint",
                    "iot:GetTopicRule",
                    "iot:ListPolicies",
                    "iot:ListThings",
                    "iot:ListTopicRules",
                    "iot:ReplaceTopicRule",
                    "kinesis:DescribeStream",
                    "kinesis:ListStreams",
                    "kinesis:PutRecord",
                    "kinesis:DescribeStreamSummary",
                    "lambda:*",
                    "lambda:CreateFunction",
                    "lambda:ListFunctions",
                    "lambda:ListEventSourceMappings",
                    "lambda:CreateEventSourceMapping",
                    "lambda:DeleteEventSourceMapping",
                    "lambda:GetFunctionConfiguration",
                    "lambda:DeleteFunction",
                    "sns:ListSubscriptions",
                    "sns:ListSubscriptionsByTopic",
                    "sns:ListTopics",
                    "sns:Publish",
                    "sns:Subscribe",
                    "sns:Unsubscribe",
                    "sns:CreateTopic",
                    "sns:DeleteTopic",
                    "sns:SetTopicAttributes",
                    "sqs:ListQueues",
                    "sqs:SendMessage",
                    "tag:GetResources",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments",
                    "application-autoscaling:DeleteScalingPolicy",
                    "application-autoscaling:DeregisterScalableTarget",
                    "application-autoscaling:DescribeScalableTargets",
                    "application-autoscaling:DescribeScalingActivities",
                    "application-autoscaling:DescribeScalingPolicies",
                    "application-autoscaling:PutScalingPolicy",
                    "application-autoscaling:RegisterScalableTarget",
                    "datapipeline:ActivatePipeline",
                    "datapipeline:CreatePipeline",
                    "datapipeline:DeletePipeline",
                    "datapipeline:DescribeObjects",
                    "datapipeline:DescribePipelines",
                    "datapipeline:GetPipelineDefinition",
                    "datapipeline:ListPipelines",
                    "datapipeline:PutPipelineDefinition",
                    "datapipeline:QueryObjects",
                    "appmesh:DescribeVirtualGateway",
                    "appmesh:DescribeVirtualNode",
                    "appmesh:ListMeshes",
                    "appmesh:ListVirtualGateways",
                    "appmesh:ListVirtualNodes",
                    "autoscaling:*",
                    "autoscaling:CreateAutoScalingGroup",
                    "autoscaling:CreateLaunchConfiguration",
                    "autoscaling:DeleteAutoScalingGroup",
                    "autoscaling:DeleteLaunchConfiguration",
                    "autoscaling:Describe*",
                    "autoscaling:UpdateAutoScalingGroup",
                    "codedeploy:BatchGetApplicationRevisions",
                    "codedeploy:BatchGetApplications",
                    "codedeploy:BatchGetDeploymentGroups",
                    "codedeploy:BatchGetDeployments",
                    "codedeploy:ContinueDeployment",
                    "codedeploy:CreateApplication",
                    "codedeploy:CreateDeployment",
                    "codedeploy:CreateDeploymentGroup",
                    "codedeploy:GetApplication",
                    "codedeploy:GetApplicationRevision",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig",
                    "codedeploy:GetDeploymentGroup",
                    "codedeploy:GetDeploymentTarget",
                    "codedeploy:ListApplicationRevisions",
                    "codedeploy:ListApplications",
                    "codedeploy:ListDeploymentConfigs",
                    "codedeploy:ListDeploymentGroups",
                    "codedeploy:ListDeployments",
                    "codedeploy:ListDeploymentTargets",
                    "codedeploy:RegisterApplicationRevision",
                    "codedeploy:StopDeployment",
                    "ecs:*",
                    "elasticfilesystem:DescribeAccessPoints",
                    "elasticfilesystem:DescribeFileSystems",
                    "elasticfilesystem:DescribeAccessPoints",
                    "elasticfilesystem:DescribeFileSystems",
                    "elasticloadbalancing:*",
                    "elasticloadbalancing:CreateListener",
                    "elasticloadbalancing:CreateLoadBalancer",
                    "elasticloadbalancing:CreateRule",
                    "elasticloadbalancing:CreateTargetGroup",
                    "elasticloadbalancing:DeleteListener",
                    "elasticloadbalancing:DeleteLoadBalancer",
                    "elasticloadbalancing:DeleteRule",
                    "elasticloadbalancing:DeleteTargetGroup",
                    "elasticloadbalancing:DescribeListeners",
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "elasticloadbalancing:DescribeRules",
                    "elasticloadbalancing:DescribeTargetGroups",
                    "fsx:DescribeFileSystems",
                    "route53:CreateHostedZone",
                    "route53:DeleteHostedZone",
                    "route53:GetHealthCheck",
                    "route53:GetHostedZone",
                    "route53:ListHostedZonesByName",
                    "servicediscovery:CreatePrivateDnsNamespace",
                    "servicediscovery:CreateService",
                    "servicediscovery:DeleteService",
                    "servicediscovery:GetNamespace",
                    "servicediscovery:GetOperation",
                    "servicediscovery:GetService",
                    "servicediscovery:ListNamespaces",
                    "servicediscovery:ListServices",
                    "servicediscovery:UpdateService",
                    "cloudtrail:LookupEvents",
                    "dax:*",
                    "kms:DescribeKey",
                    "kms:ListAliases",
                    "resource-groups:ListGroups",
                    "resource-groups:ListGroupResources",
                    "resource-groups:GetGroup",
                    "resource-groups:GetGroupQuery",
                    "resource-groups:DeleteGroup",
                    "resource-groups:CreateGroup",
                    "apigateway:*"
                  ],
                  "Resource": ["*"]
                }
              ]
            }
          }
        ],
        "Tags": [
          {"Key": "Name","Value": "Jenkins-Role"}
        ]
      }
    },
    "JenkinsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [{ "Ref": "JenkinsRole" }]
      }
    },
    "JenkinsInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "Comment": "Install and configure Jenkins",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Jenkins": [
              "preConfig",
              "preInstall"
            ]
          },
          "preConfig": {
            "commands": {
              "01_createmountpoint": {
                "command": " mkfs -t xfs /dev/xvdb && mkdir -p /media/data"
              },
              "02_formatandmountextravolumen": {
                "command": "echo 'Already mounted' && sudo mount /dev/xvdb /media/data"
              },
              "03_makeitpersistent": {
                "command": "echo '/dev/xvdb      /media/data xfs    defaults,nofail 0   2' >> /etc/fstab"
              }
            }    
          },
          "preInstall": {
            "commands": {
              "01_update_instance": {
                "command": "yum update -y"
              },
              "02_download_and_install_docker": {
                "command": "sudo amazon-linux-extras install docker && sudo usermod -a -G docker ec2-user && sudo systemctl start docker"
              },
              "03_download_jenkins_configuration": {
                "command": "cd /media/data/ && wget https://aws-jccastro-bucket.s3.amazonaws.com/jenkins.tar.gz && tar -xvf jenkins.tar.gz && chmod -R 777 /media/data/jenkins/" 
              },
              "04_start_jenkins_container": {
                "command": "chmod 777 /var/run/docker.sock && sudo docker run --privileged -p 2375:2375 -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /media/data/jenkins:/var/jenkins_home/ --name jenkins -d jenkins/jenkins:lts" 
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": {
          "Fn::FindInMap": [
            "InstanceAMI",
            { "Ref": "AWS::Region" },
            { "Ref": "Environment" }
          ]
        },
        "SecurityGroupIds": [
          {
            "Fn::FindInMap": [
              "SecurityGroups",
              { "Ref": "AWS::Region" },
              { "Ref": "Environment" }
            ]
          },
           {"Ref" : "JenkinsSecurityGroup"}
        ],
        "SubnetId": {
          "Fn::Select": [
            "0",
            {
              "Fn::FindInMap": [
                "VPCSubnets",
                { "Ref": "AWS::Region" },
                { "Ref": "Environment" }
              ]
            }
          ]
        },
        "InstanceType": {
          "Fn::FindInMap": ["GlobalMap", "InstType", { "Ref": "Environment" }]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                { "Ref": "AWS::StackName" },
                "         --resource JenkinsInstance ",
                "         --configsets Jenkins ",
                "         --region ",
                { "Ref": "AWS::Region" },
                "\n",

                "/opt/aws/bin/cfn-signal -s true ",
                "         --stack ",
                { "Ref": "AWS::StackName" },
                "         --resource JenkinsInstance ",
                "         --region ",
                { "Ref": "AWS::Region" },
                "\n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
            "VolumeSize": "8",
            "VolumeType": "gp2"
            }
            }
        ],
        "IamInstanceProfile": { "Ref": "JenkinsInstanceProfile" },
        "Tags": [
          {"Key": "Name","Value": "Jenkins"}
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT20M"
        }
      }
    }
  },
  "Outputs": {
    "JenkinsAddress": {
      "Description": "Jenkins IP Address",
      "Value": { "Fn::GetAtt": ["JenkinsInstance", "PublicIp"] }
    }
  }
}